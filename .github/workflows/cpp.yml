name: Check c++ pkg PROPOSAL.

on: [push]

jobs:
    build:
      runs-on: ${{ matrix.os }}
      strategy:
        matrix:
          include:
            - os : "ubuntu-latest"
              compiler : "gcc"
              compilerpp : "g++"
            - os : "macos-latest"
              compiler : "clang"
              compilerpp : "clang++"
            - os : "ubuntu-18.04"
              compiler : "gcc-7"
              compilerpp : "g++-7"
            - os : "windows-latest"
      env:
        CC: ${{ matrix.compiler }}
        CXX: ${{ matrix.compilerpp }}
      steps:
        - uses: actions/checkout@v2
        - name: Cache conan
          id: cache-conan
          uses: actions/cache@v2
          with:
            path: ~/.conan
            key: ${{ runner.os }}-cache-conan-${{ matrix.compiler }}
        - name: Cache build
          id: cache-build
          uses: actions/cache@v2
          with:
            path: PROPOSAL_BUILD
            key: ${{ runner.os }}-cache-build-${{ matrix.compiler }}
        - uses: actions/setup-python@v2
          with:
            python-version: '3.7'
        - name: Install python dependencies
          run: python -m pip install conan
        - name: Initialize conan
          if : steps.cache-conan.outputs.cache-hit != 'true'
          run: conan profile new default --detect
        - name: Update conan profile
          if : ${{ matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-latest' }}
          run: conan profile update settings.compiler.libcxx=libstdc++11 default
        - name: create build directory
          if : steps.cache-build.outputs.cache-hit != 'true'
          run: mkdir PROPOSAL_BUILD
        - name: Install PROPOSAL dependencies
          run: cd PROPOSAL_BUILD && conan install .. -o with_testing=True --build=missing
        - name: Run build automatisation tool
          run: cmake . -B PROPOSAL_BUILD -DCMAKE_BUILD_TYPE=RELEASE -DBUILD_TESTING=TRUE
        - name: Build lib
          if: ${{ matrix.os != 'windows-latest' }}
          run: cmake --build PROPOSAL_BUILD
        - name: Build lib
          if: ${{ matrix.os == 'windows-latest' }}
          run: cmake --build PROPOSAL_BUILD --target ALL_BUILD --config Release

    test:
      runs-on: ${{ matrix.os }}
      needs: build
      strategy:
        matrix:
          include:
            - os : "ubuntu-latest"
              compiler : "gcc"
              compilerpp : "g++"
            - os : "macos-latest"
              compiler : "clang"
              compilerpp : "clang++"
            - os : "ubuntu-18.04"
              compiler : "gcc-7"
              compilerpp : "g++-7"
            - os : "windows-latest"
      env:
        PROPOSAL_TEST_FILES: ${{ github.workspace }}/PROPOSAL_BUILD/tests/TestFiles
      steps:
        - uses: actions/checkout@v2
        - name: Cache conan
          id: cache-conan
          uses: actions/cache@v2
          with:
            path: ~/.conan
            key: ${{ runner.os }}-cache-conan-${{ matrix.compiler }}
        - name: Cache build
          id: cache-build
          uses: actions/cache@v2
          with:
            path: PROPOSAL_BUILD
            key: ${{ runner.os }}-cache-build-${{ matrix.compiler }}
        - name: Run tests
          run: ctest --test-dir PROPOSAL_BUILD -j2 --verbose -E "(Brems|Photo|Epair|Mupair)"
